* main
** intent
This describes the project to rationalize Emacs and Spacemacs configurations
There are 2 smaller projects : chemacs2Config and reviveConfig
The motivating event was how to better use revive.el to stack buffer/file definitions

This lead to 2 approaches
1. Study elisp to understand revive.el and then modify to suit
   While (1) was proceeding, it occured that revive.el was a painful wrapper to reading some windows
   configurations.
2. Study the format of revive.el configuration so that pieces of revive configurations can be
   loaded manually at will.
   Although cluncky, the first usage is to copy the relevant revive config to ~/.revive.el and use
   'resume' to load.
3. After better usage, might write a better resume that takes a list of files and loads them
** registry
| machine      | os     | dir                        | alias         | chemacs2 | emacs |
|--------------+--------+----------------------------+---------------+----------+-------|
| air-win10    | win10  | d:/users/khtan/emacsConfig | ~/emacsConfig | yes      |  28.2 |
| kwee1-ubuntu | wsl2   |                            | ~/emacsConfig | yes      |  27.1 |
| kwee1-win10  | win10  | d:/users/khtan/emacsConfig | ~/emacsConfig | yes      |  28.2 |
| rooibos      | ubuntu |                            |               | yes      |  28.2 |
** record
*** kwee1
https://github.com/khtan-private/emacsConfig.git created from kwee1-win10
spacemacs.d exists but spacemacs0.d not yet
Keep these 2 for reference for now:
   d:/users/khtan/emacsOld
   d:/users/khtan/Emacs
*** air
**** plan
1. clone and compare with original
   make updates and push back to remote
2. kwee1: pull and test
**** sidebar: spacemacs adds a trailing space for future appends
(setq sentence-end-double-space nil) can be used to NOT do this

**** reviveConfig for //air
cd ~
cp emacsConfig/reviveConfig/khtan.el .revive.el

Somehow google drives G: H: I: are not mapped in the same way on //air and //kwee1
|   | //air                   |                         |                     |
|   | My Drive                | bash ls '/<d>/My Drive' | dir <d>:            |
| g | icon is gdrive in cloud | fails                   | sees My Drive.lnk   |
| h | icon is folder in cloud | ok                      | sees <dir> My Drive |
| i | icon is folder in cloud | ok                      | sees <dir> My Drive |


|   | //kwee1                 |                         |                     |
|   | My Drive                | bash ls '/<d>/My Drive' | dir <d>:            |
| g | icon is folder in cloud | ok                      | sees <dir> My Drive |
| h | icon is folder in cloud | ok                      | sees <dir> My Drive |
| i | icon is gdrive in cloud | fails                   | sees My Drive.lnk   |

**** folded changes back to //kwee1
**** cleaned up //air/d:/users/khtan/emacsConfig0
Keep these 2 for reference for now:
   d:/users/khtan/emacsOld
   d:/users/khtan/Emacs
*** kwee1-ubuntu
**** found that git push required authentication
installed gh and logged in with browser
magit push still asks for user/token
on the shell: git config credentialStore plaintext
then git push on shell worked
then magit push worked
not suree if gh is needed

To test: restart Ubuntu and make sure gh not logged in.
         try a magit push again
*** rooibos
**** init.el needs windows code to load windows-scripts layer? No
  windows-scripts if for powershell and powershell can be available in linux
**** init.el alphabetise ?
**** init.el revive.el needs to be added
The location of emacs by snap:
 /snap/emacs/1855/usr/share/emacs/site-lisp
 Added revive.el to /usr/local/share/emacs/site-lisp
 With an unless code
**** ubuntu gnome online account to google drive workaround
The path to the drive is consistent but id driven instead of the filenames.
Luckily, Emacs architecture took that into account.
The khtan.rooibos.el is able to have a path and buffer name that are different, ie the
path ends in a file but the buffer is called st.org etc.
** emacsConfig
*** chemacs2Config
*** reviveConfig
**** Problem: resume is unreliable when .revive.el gets too big
revive.el works but is unreliable at times. This is especially true after a long session and many buffers/files
are opened. When resume fails, it is due to some bad formattig of the .revive.el file but it is too late
to recover. My examination of .revive.el shows that there are too much information esp on the buffer and
file histories that bloat the data and causes possible syntax errors during writing.

Since the buffers/files I need to load are few and consistent, it is simpler to just create some
clean configuration files and load them in a consistent way.
**** Intent
The reviveConfig folder contains self-exclusionary revive files so that they can be loaded manually
when needed.

For eg: when we want that 'play' set

1. cd ~
2. cp emacsConfig/spacemacs.d/reviveConfig/play.el .revive.el
3. M-x resume

There is a default khtan.el that is copied to .revive.el so that the initial Spacemacs resume
will have the main files
**** Where to keep the repository of chemacs2Config
The folders to keep is emacsConfig.
The question is whether reviveConfig should be in emacsConfig or emacsConfig/spacemacs.d

reviveConfig is more dependent on the machine and platform
   The internals are all path related buffers or files
   These paths can differ either due to platform or machine.
   For eg, win paths have drive:<path> while lin paths are /<path>
   For configurations, it is not easy to use relative paths - I think

ls -ld emacsConfig/*
drwxr-xr-x 1 kweeECS 197121 0 Mar 20 11:05 emacsConfig/emacs.d
drwxr-xr-x 1 kweeECS 197121 0 Mar 27 17:17 emacsConfig/spacemacs.d
drwxr-xr-x 1 kweeECS 197121 0 Mar 27 17:19 emacsConfig/spacemacs.develop
drwxr-xr-x 1 kweeECS 197121 0 Mar 20 11:05 emacsConfig/spacemacs0.d
drwxr-xr-x 1 kweeECS 197121 0 Mar 20 11:04 emacsConfig/spacemacs0.develop

So, it does not make sense for reviveConfig to be in spacemacs.d but it should be independent of
Spacemac's implemetnation/configurations


for /f "tokens=* delims=" %f in ('dir /b /ad') do @(echo %f & dir /b /ad "%f\*" & echo.)
for /f "tokens=* delims=" %f in ('dir /b /ad') do @(echo %f & dir /b /ad /s /t:c "%f\*" & echo.)
**** Next steps
Using ChatGPT, I learned that revive.el is the backbone of several other packages such as
   1. desktop+
   2. workgroups2
   2. perspective.el
While nice, they all have their assumptions and workflow that I have not fully investigated.
Also, they do not address the issue of my concern - flexible/minimal defining of configs so that
loading them will not cause problems.
